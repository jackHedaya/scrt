import{_ as e,d as t}from"./app.59c8c353.js";const a={},o=t(`<h1 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set</h1><div class="language-text ext-text"><pre class="language-text"><code>scrt set [flags] key [value]
</code></pre></div><p>Associate a value to a key in the store. If <code>value</code> is omitted from the command line, it will be read from standard input.</p><p>If a value is already set for <code>key</code>, the command will fail unless the <code>--overwrite</code> option is set.</p><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h3><p><strong><code>--overwrite</code>:</strong> when this flag is set, <code>scrt</code> will overwrite the value for <code>key</code> in the store, if it exists, instead of returning an error. If no value is associated to <code>key</code>, <code>--overwrite</code> has no effect.</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><p>Associate <code>Hello World</code> to the key <code>greeting</code> in the store, using implicit store configuration (configuration file or environment variables).</p><div class="language-bash ext-sh"><pre class="language-bash"><code>scrt <span class="token builtin class-name">set</span> greeting <span class="token string">&quot;Hello World&quot;</span>
</code></pre></div>`,9);function s(i,r){return o}var c=e(a,[["render",s],["__file","set.html.vue"]]);export{c as default};
