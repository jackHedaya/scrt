import{_ as e,o,c as i,a}from"./app.58b453f6.js";const t={},d=a('<h1 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h1><h2 id="global" tabindex="-1"><a class="header-anchor" href="#global" aria-hidden="true">#</a> Global</h2><h3 id="password" tabindex="-1"><a class="header-anchor" href="#password" aria-hidden="true">#</a> Password</h3><ul><li>Type: <code>string</code></li><li>YAML: <code>password</code></li><li>Environment variable: <code>SCRT_PASSWORD</code></li></ul><p>The password to the store. The setting will be used to derive a key, to decrypt and encrypt the data in the store.</p><h3 id="storage-type" tabindex="-1"><a class="header-anchor" href="#storage-type" aria-hidden="true">#</a> Storage type</h3><ul><li>Type: <code>string</code>, <code>&quot;local&quot; | &quot;s3&quot; | &quot;git&quot;</code></li><li>YAML: N/A</li><li>Environment variable: <code>SCRT_STORAGE</code></li></ul><p>The storage backend to use for the store.</p><p>Storage type (<code>storage</code>) can be ignored in the YAML configuration file. scrt will read the configuration under the key for the storage type (e.g. <code>local:</code>). <em>Defining configurations for multiple storage types in a single file will result in undefined behavior.</em></p><h3 id="verbosity" tabindex="-1"><a class="header-anchor" href="#verbosity" aria-hidden="true">#</a> Verbosity</h3><ul><li>Type: <code>boolean</code></li><li>Default: <code>false</code></li><li>YAML: <code>verbose</code></li><li>Environment variables: <code>SCRT_VERBOSE</code></li></ul><h2 id="local-storage" tabindex="-1"><a class="header-anchor" href="#local-storage" aria-hidden="true">#</a> Local storage</h2><h3 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> Path</h3><ul><li>Type: <code>string</code></li><li>YAML: <code>local</code> &gt; <code>path</code></li><li>Environment variable: <code>SCRT_LOCAL_PATH</code></li></ul><p>The path to the store file on the local computer.</p><h2 id="s3-storage" tabindex="-1"><a class="header-anchor" href="#s3-storage" aria-hidden="true">#</a> S3 storage</h2><h3 id="bucket-name" tabindex="-1"><a class="header-anchor" href="#bucket-name" aria-hidden="true">#</a> Bucket name</h3><ul><li>Type: <code>string</code></li><li>YAML: <code>s3</code> &gt; <code>bucket-name</code></li><li>Environment variable: <code>SCRT_S3_BUCKET_NAME</code></li></ul><p>The name of the bucket where the store object is located.</p><h3 id="object-key" tabindex="-1"><a class="header-anchor" href="#object-key" aria-hidden="true">#</a> Object key</h3><ul><li>Type: <code>string</code></li><li>YAML: <code>s3</code> &gt; <code>key</code></li><li>Environment variable: <code>SCRT_S3_KEY</code></li></ul><p>The path of the store object in the bucket.</p><h3 id="endpoint-url" tabindex="-1"><a class="header-anchor" href="#endpoint-url" aria-hidden="true">#</a> Endpoint URL</h3><ul><li>Type: <code>string</code></li><li>Default: <code>https://s3.&lt;region&gt;.amazonaws.com</code></li><li>YAML: <code>s3</code> &gt; <code>endpoint-url</code></li><li>Environment variable: <code>SCRT_S3_ENDPOINT_URL</code></li></ul><p>Override the default S3 URL.</p><h3 id="region" tabindex="-1"><a class="header-anchor" href="#region" aria-hidden="true">#</a> Region</h3><ul><li>Type: <code>string</code></li><li>YAML: <code>s3</code> &gt; <code>region</code></li><li>Environment variable: <code>SCRT_S3_REGION</code></li></ul><p>The region of the S3 storage.</p><h2 id="git-storage" tabindex="-1"><a class="header-anchor" href="#git-storage" aria-hidden="true">#</a> Git storage</h2><h3 id="url" tabindex="-1"><a class="header-anchor" href="#url" aria-hidden="true">#</a> URL</h3><ul><li>Type: <code>string</code></li><li>YAML: <code>git</code> &gt; <code>url</code></li><li>Environment variable: <code>SCRT_GIT_URL</code></li></ul><p>The URL of the git repository.</p><h3 id="path-1" tabindex="-1"><a class="header-anchor" href="#path-1" aria-hidden="true">#</a> Path</h3><ul><li>Type: <code>string</code></li><li>YAML: <code>git</code> &gt; <code>path</code></li><li>Environment variables: <code>SCRT_GIT_PATH</code></li></ul><p>The path of the store file in the repository.</p><h3 id="branch" tabindex="-1"><a class="header-anchor" href="#branch" aria-hidden="true">#</a> Branch</h3><ul><li>Type: <code>string</code></li><li>YAML: <code>git</code> &gt; <code>branch</code></li><li>Environment variables: <code>SCRT_GIT_BRANCH</code></li></ul><p>The name of the branch to checkout, commit and push to on updates. Uses the default branch when missing.</p><h3 id="commit-or-tag" tabindex="-1"><a class="header-anchor" href="#commit-or-tag" aria-hidden="true">#</a> Commit or tag</h3><ul><li>Type: <code>string</code></li><li>YAML: <code>git</code> &gt; <code>checkout</code></li><li>Environment variables: <code>SCRT_GIT_CHECKOUT</code></li></ul><p>A tree-ish revision to checkout, e.g. commit or tag</p><h3 id="commit-message" tabindex="-1"><a class="header-anchor" href="#commit-message" aria-hidden="true">#</a> Commit message</h3><ul><li>Type: <code>string</code></li><li>Default: <code>&quot;update secrets&quot;</code></li><li>YAML: <code>git</code> &gt; <code>message</code></li><li>Environment variables: <code>SCRT_GIT_MESSAGE</code></li></ul><p>The commit message used when updating the store.</p>',44),r=[d];function c(l,n){return o(),i("div",null,r)}var s=e(t,[["render",c],["__file","index.html.vue"]]);export{s as default};
